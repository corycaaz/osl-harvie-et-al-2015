calculate(stat = "diff in props", order = c("male", "female"))
)
# Calculate observed difference; men - women
disc_diff <- disc %>%
group_by(sex) %>%
summarize(promoted_prop == "promoted") %>%
summarize(diff_prop = diff(promoted_prop)) %>%
pull()
# Calculate observed difference; men - women
disc_diff <- disc %>%
group_by(sex) %>%
summarize(promote == "promoted") %>%
summarize(diff_prop = diff(promoted_prop)) %>%
pull()
disc
# Calculate observed difference; men - women
disc_diff <- disc %>%
group_by(sex) %>%
summarize(promoted_prop = mean(promote == "promoted")) %>%
summarize(diff_prop = diff(promoted_prop)) %>%
pull()
# Create null distribution of difference in proportion
(disc_perm <- disc %>%
# Specify the null model and outcome of interest
specify(promote ~ sex, success = "promoted") %>%
# Hypothesize the relationship between variables
hypothesize(null = "independence") %>%
# Generate permutations to break the existing relationship
generate(reps = 1000, type = "permute") %>%
# Calculate the permuted statistic for the null distribution
calculate(stat = "diff in props", order = c("male", "female"))
)
# Construct
# Construct density plot
ggplot(disc_perm, aes(x = stat)) +
geom_histogram(binwidth = .001) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = disc_diff),
color = "red", alpha = 0.5, size = 2)
# Calculate observed difference; men - women
disc_diff <- disc %>%
group_by(sex) %>%
summarize(promoted_prop = mean(promote == "promoted")) %>%
summarize(diff_prop = diff(promoted_prop))
disc_diff
# Construct density plot
ggplot(disc_perm, aes(x = stat)) +
geom_histogram(binwidth = .001) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
# Construct density plot
ggplot(disc_perm, aes(x = stat)) +
geom_histogram(binwidth = .01) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
# Construct density plot
ggplot(disc_perm, aes(x = stat)) +
geom_histogram() +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
# Construct density plot
ggplot(disc_perm, aes(x = stat)) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(NHANES)
disc_perm
disc_perm %>%
summarize(
q.90 = quantile(stat, p = 0.9),
q.95 = quantile(stat, p = 0.95),
q.99 = quantile(stat, p 0.99)
disc_perm %>%
summarize(
q.90 = quantile(stat, p = 0.9),
q.95 = quantile(stat, p = 0.95),
q.99 = quantile(stat, p = 0.99)
)
(critical_region <- disc_perm %>%
summarize(q.5 = quantile(stat, p = 0.05),
q.95 = quantile(stat, p = 0.95))
)
(critical_region <- disc_perm %>%
summarize(q.5 = quantile(stat, p = 0.05),
q.95 = quantile(stat, p = 0.95))
)
# Display critical region under density curve of null distribution
ggplot(disc_perm, aes(x = stat)) +
geom_density() +
geom_area(aes(x = ifelse(stat >= critical_region$q.5 & stat <= critical_region$q.95, stat, 0)),
fill = "blue", alpha = 0.5) +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
(critical_region <- disc_perm %>%
summarize(q.5 = quantile(stat, p = 0.05),
q.95 = quantile(stat, p = 0.95))
)
# Display critical region under density curve of null distribution
ggplot(disc_perm, aes(x = stat)) +
geom_density() +
stat_function(fun = dnorm, xlim = c(critical_region$q.5, critical_region$q.95), geom = "area",
fill = "blue", alpha = 0.5) +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
(critical_region <- disc_perm %>%
summarize(q.5 = quantile(stat, p = 0.05),
q.95 = quantile(stat, p = 0.95))
)
# Display critical region under density curve of null distribution
ggplot(disc_perm, aes(x = stat)) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
ggplot_build(ggplot(disc_perm, aes(x = stat)) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2))
# Construct density plot
(disc_plot <- ggplot(disc_perm, aes(x = stat)) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
)
# Construct density plot
(disc_plot <- ggplot(disc_perm, aes(x = stat)) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
)
(critical_region <- disc_perm %>%
summarize(q.5 = quantile(stat, p = 0.05),
q.95 = quantile(stat, p = 0.95))
)
density_data <- ggplot_build(disc_plot)
x1 <- min(which(density_data$data[[1]]$x >= critical_region$q.5))
x2 <- max(which(density_data$data[[1]]$x <= critical_region$q.95))
disc_plot %>%
geom_area(data = data.frame(x = density_data$data[[1]]$x[x1:x2],
y = density_data$data[[1]]$y[x1:x2]),
aes(x = x, y = y), fill = "red")
density_data <- ggplot_build(disc_plot)
x1 <- min(which(density_data$data[[1]]$x >= critical_region$q.5))
x2 <- max(which(density_data$data[[1]]$x <= critical_region$q.95))
disc_plot +
geom_area(data = data.frame(x = density_data$data[[1]]$x[x1:x2],
y = density_data$data[[1]]$y[x1:x2]),
aes(x = x, y = y), fill = "red")
density_data <- ggplot_build(disc_plot)
x1 <- min(which(density_data$data[[1]]$x >= critical_region$q.5))
x2 <- max(which(density_data$data[[1]]$x <= critical_region$q.95))
disc_plot +
geom_area(data = data.frame(x = density_data$data[[1]]$x[x1:x2],
y = density_data$data[[1]]$y[x1:x2]),
aes(x = x, y = y), fill = "lightblue", alpha = 0.5)
density_data <- ggplot_build(disc_plot)
x1 <- min(which(density_data$data[[1]]$x >= critical_region$q.5))
x2 <- max(which(density_data$data[[1]]$x <= critical_region$q.95))
disc_plot +
geom_area(data = data.frame(x = density_data$data[[1]]$x[x1:x2],
y = density_data$data[[1]]$y[x1:x2]),
aes(x = x, y = y), fill = "blue", alpha = 0.5)
density_data <- ggplot_build(disc_plot)
x1 <- min(which(density_data$data[[1]]$x >= critical_region$q.5))
x2 <- max(which(density_data$data[[1]]$x <= critical_region$q.95))
disc_plot +
geom_area(data = data.frame(x = density_data$data[[1]]$x[x1:x2],
y = density_data$data[[1]]$y[x1:x2]),
aes(x = x, y = y), fill = "lightblue", alpha = 0.75)
density_data <- ggplot_build(disc_plot)
x1 <- min(which(density_data$data[[1]]$x >= critical_region$q.5))
x2 <- max(which(density_data$data[[1]]$x <= critical_region$q.95))
disc_plot +
geom_area(data = data.frame(x = density_data$data[[1]]$x[x1:x2],
y = density_data$data[[1]]$y[x1:x2]),
aes(x = x, y = y), fill = "lightblue")
disc_perm %>%
summarize(
q.01 = quantile(stat, p = 0.01),
q.05 = quantile(stat, p = 0.05),
q.10 = quantile(stat, p = 0.1)
)
```{r}
# Construct density plot
(disc_plot <- ggplot(disc_perm, aes(x = stat)) +
geom_density(size = 2) +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
)
# Construct density plot
(disc_plot <- ggplot(disc_perm, aes(x = stat)) +
geom_density(size = 1) +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
)
# Construct density plot
(disc_plot <- ggplot(disc_perm, aes(x = stat)) +
geom_density() +
# Show location of observed difference in promotion
geom_vline(data = disc_diff, aes(xintercept = diff_prop),
color = "red", alpha = 0.5, size = 2)
)
# Visualize and calculate the p-value
disc_perm %>%
visualize(obs_stat = diff_orig, direction = "greater")
disc_perm %>%
get_p_value(obs_stat = diff_orig,direction = "greater")
# Visualize and calculate the p-value
disc_perm %>%
shade_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
disc_diff$diff_prop
# Visualize and calculate the p-value
disc_perm %>%
shade_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
# Visualize and calculate the p-value
disc_perm %>%
shade_p_value(obs_stat = disc_diff$diff_prop, direction = "greater", color = "pink")
# Visualize and calculate the p-value
disc_perm %>%
visualize(obs_stat = disc_diff$diff_prop, direction = "greater")
disc_perm %>%
get_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
?shade_p_value
# Visualize and calculate the p-value
disc_plot +
visualize(obs_stat = disc_diff$diff_prop, direction = "greater")
disc_plot
# Visualize and calculate the p-value
disc_plot +
shade_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
disc_perm %>%
get_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
# Visualize and calculate the p-value
disc_plot +
shade_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
disc_perm %>%
get_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
disc %>%
specify(promote ~ sex, success = "promoted") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props") %>%
visualize(method = "simulation")
disc %>%
specify(promote ~ sex, success = "promoted") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("male", "female")) %>%
visualize(method = "simulation")
disc %>%
specify(promote ~ sex, success = "promoted") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("male", "female")) %>%
visualize(method = "simulation") +
shade_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
disc %>%
specify(promote ~ sex, success = "promoted") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("male", "female")) %>%
visualize(method = "simulation")
disc %>%
specify(promote ~ sex, success = "promoted") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("male", "female")) %>%
visualize(method = "simulation") +
shade_p_value(obs_stat = disc_diff$diff_prop, direction = "greater")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/osl-harvie-et-al-2015/src")
library(tidyverse)
library(psych)
library(broom)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/osl-harvie-et-al-2015/src")
# Set working directory
setwd("~/GitHub/osl-harvie-et-al-2015/src")
# Import dataset
harvie <- read_csv("../data/Harvie et al. 2015.csv")
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
# Create long form
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
# Set variables as factors
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
participant <- factor(participant)
})
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
# Create the analysis of variance object
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation),
data = harvie_clean)
# Summarize the aov object
summary(harvie_aov)
# Extract sum of squares
(harvie_aov_tidy <- tidy(harvie_aov))
# Collect sum of squares
harvie_aov_tidy$sumsq[3]
harvie_aov_tidy$sumsq[4]
# Calculate partial eta-squared
(harvie_eta <- harvie_aov_tidy$sumsq[3] / (harvie_aov_tidy$sumsq[3] + harvie_aov_tidy$sumsq[4]))
### Significant Outliers?
ggplot(harvie_clean, aes(x = feedback_type, y = pain_onset)) +
geom_boxplot()
### Normality?
shapiro.test(harvie$understated_feedback)
shapiro.test(harvie$overstated_feedback)
### Sphericity?
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
library(car)
### Sphericity?
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
library(nlme)
library(multcomp)
lme_harvie <- lme(pain_onset ~ feedback_type, random = ~1|participant/direction_rotation, data = harvie_clean)
lme_harvie <- lme(pain_onset ~ feedback_type, random = ~1|participant/direction_rotation, data = harvie_clean)
summary(glht(lme_harvie, linfct=mcp(V = "Tukey")), test = adjusted(type = "bonferroni"))
summary(glht(lme_harvie, linfct=mcp(direction_rotation = "Tukey")), test = adjusted(type = "bonferroni"))
summary(glht(lme_harvie, linfct=mcp(feedback_type = "Tukey")), test = adjusted(type = "bonferroni"))
library(nlme)
library(multcomp)
# Construct repeated measures ANOVA
lme_harvie <- lme(pain_onset ~ feedback_type,
random = ~1|participant/direction_rotation, data = harvie_clean)
# Perform pairwise comparisons with Bonferroni correction
summary(glht(lme_harvie, linfct=mcp(feedback_type = "Tukey")),
test = adjusted(type = "bonferroni"))
# Construct the APA theme
apa_theme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
plot.title = element_text(hjust = 0.5),
text = element_text(size = 12))
harvie_desc
harvie_desc$mean
#
harvie_desc %>%
mutate(feedback = row.names(harvie_desc))
# Rownames to variable
harvie_desc <- harvie_desc %>%
mutate(feedback_type = row.names(harvie_desc))
ggplot(harvie_desc, aes(x = feedback_type, y = mean)) +
geom_point()
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
# Import dataset
harvie <- read_csv("../data/Harvie et al. 2015.csv")
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
# Create long form
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
# Set variables as factors
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
participant <- factor(participant)
})
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
(harvie_desc <- harvie %>%
select(ends_with("feedback")) %>%
describe()
)
# Import dataset
harvie <- read_csv("../data/Harvie et al. 2015.csv")
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
(harvie_desc <- harvie %>%
select(ends_with("feedback")) %>%
describe()
)
s
# Import dataset
harvie <- read_csv("../data/Harvie et al. 2015.csv")
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
# Create long form
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
# Set variables as factors
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
participant <- factor(participant)
})
(harvie_desc <- harvie %>%
select(ends_with("feedback")) %>%
describe()
)
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
harvie %>%
select(ends_with("Feedback")) %>%
describe()
(harvie_desc <- harvie %>%
select(ends_with("feedback")) %>%
describe()
)
# Create the analysis of variance object
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation),
data = harvie_clean)
# Summarize the aov object
summary(harvie_aov)
harvie
harvie %>%
select(ends_with("feedback")) %>%
describe()
(harvie_desc <- harvie %>%
select() %>%
describe()
)
library(tidyverse)
(harvie_desc <- harvie %>%
select(ends_with("feedback")) %>%
describe()
)
