feedback_type <- factor(feedback_type)
})
harvie_aov <- aov(pain_onset ~ feedback_type * accurate_feedback + Error(participant), data = harvie_clean)
summary(harvie_aov)
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant), data = harvie_clean)
summary(harvie_aov)
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
# Import dataset
harvie <- read_csv("../data/Harvie et al. 2015.csv")
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
# TEST
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
# Set variables as factors
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
})
harvie_aov <- aov(pain_onset ~ feedback_type + Error(factor(participant)/feedback_type), data = harvie_clean)
summary(harvie_aov)
harvie_aov <- aov(pain_onset ~ feedback_type + Error(factor(participant)), data = harvie_clean)
summary(harvie_aov)
harvie_aov <- aov(pain_onset ~ feedback_type + Error(feedback_type/factor(participant)), data = harvie_clean)
summary(harvie_aov)
harvie_aov <- aov(pain_onset ~ feedback_type + Error(factor(participant)/direction_rotation), data = harvie_clean)
summary(harvie_aov)
harvie_aov <- aov(pain_onset ~ feedback_type + Error(factor(participant)/direction_rotation), data = harvie_clean)
summary(harvie_aov)
# Import dataset
harvie <- read_csv("../data/Harvie et al. 2015.csv")
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
# Create long form
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
# Set variables as factors
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
participant <- factor(participant)
})
# Check factor
class(harvie_clean$feedback_type)
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
aov.ex3 = aov(Recall~Valence+Error(Subject/Valence),data.ex3)
harvie_aov <- aov(pain_onset ~ feedback_type + Error(factor(participant)/direction_rotation), data = harvie_clean)
summary(harvie_aov)
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation), data = harvie_clean)
summary(harvie_aov)
Anova(harvie_aov)
summary(harvie_aov)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/osl-harvie-et-al-2015/src")
library(tidyverse)
library(psych)
harvie <- read_csv("../data/Harvie et al. 2015.csv")
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
# Set variables as factors
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
# participant <- factor(participant)
})
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation),
data = harvie_clean)
summary(harvie_aov)
library(tidyverse)
library(psych)
harvie <- read_csv("../data/Harvie et al. 2015.csv")
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
participant <- factor(participant)
})
# Summary of aov object
summary(harvie_aov)
# Create the analysis of variance
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation),
data = harvie_clean)
# Summary of aov object
summary(harvie_aov)
etaSquared(harvie_aov)
install.packages("lsr")
library(lsr)
etaSquared(harvie_aov)
etaSquared(harvie_aov, anova = TRUE)
class(harvie_aov)
View(harvie_aov)
etaSquared(harvie_aov$Within)
View(harvie_aov)
# Create the analysis of variance
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation),
data = harvie_clean)
# Summary of aov object
summary(harvie_aov)
etaSquared(harvie_aov$Within)
harvie_aov
harvie_aov$Within
0.4321/1.0742
1.0742/0.4321
harvie_aov
# Summary of aov object
summary(harvie_aov)
# Summary of aov object
summary(harvie_aov)
View(harvie_aov)
0.4321/(1.0742+0.4321)
class(harvie_aov)
sapply(sapply(summary(harvie_aov), '[[', 1), '[[', 'Mean Sq')
sapply(sapply(summary(harvie_aov), `[[`, 1), `[[`, `Mean Sq`)
sapply(sapply(summary(harvie_aov), `[[`, 1), `[[`, `feedback_type`)
sapply(sapply(summary(harvie_aov), `[[`), `[[`, `feedback_type`)
sapply(summary(harvie_aov), `[[`, 1)
sapply(summary(harvie_aov), `[[`, 2)
sapply(summary(harvie_aov), `[[`, 3)
sapply(summary(harvie_aov), `[[`)
sapply(summary(harvie_aov), `[[`, 1)
View(harvie_aov)
summary(harvie_aov)
library(broom)
tidy(harvie_aov)
(harvie_aov_tidy <- tidy(harvie_aov))
# Extract sum of squares
(harvie_aov_tidy <- tidy(harvie_aov))
harvie_aov_tidy$sumsq[3]
harvie_aov_tidy$sumsq[4]
# Calculate partial eta-squared
(harvie_eta <- harvie_aov_tidy$sumsq[3] / (harvie_aov_tidy$sumsq[3] + harvie_aov_tidy$sumsq[1]))
# Collect sum of squares
harvie_aov_tidy$sumsq[3]
harvie_aov_tidy$sumsq[4]
# Calculate partial eta-squared
(harvie_eta <- harvie_aov_tidy$sumsq[3] / (harvie_aov_tidy$sumsq[3] + harvie_aov_tidy$sumsq[4]))
# Collect sum of squares
harvie_aov_tidy$sumsq[3]
harvie_aov_tidy$sumsq[4]
# Calculate partial eta-squared
(harvie_eta <- harvie_aov_tidy$sumsq[3] / (harvie_aov_tidy$sumsq[3] + harvie_aov_tidy$sumsq[4]))
# Create the analysis of variance object
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation),
data = harvie_clean)
# Summarize the aov object
summary(harvie_aov)
47+94
141+2
24+25+94
24+25+95
summary(harvie_aov)
.26068+.3263+.4321
.26068+.3263+1.0742
### Significant Outliers?
ggplot(harvie_clean, aes(x = feedback_type)) +
geom_boxplot()
### Significant Outliers?
ggplot(harvie_clean, aes(x = feedback_type, y = pain_onset)) +
geom_boxplot()
### Normality?
shapiro.test(harvie$understated_feedback)
shapiro.test(harvie$overstated_feedback)
shapiro.test(harvie$accurate_feedback)
shapiro.test(harvie$understated_feedback)
ggplot(harvie_clean, aes(x = feedback_type, y = pain_onset)) +
geom_boxplot()
# Construct the APA theme
apa_theme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
plot.title = element_text(hjust = 0.5),
text = element_text(size = 12))
### Sphericity?
as.matrix(harvie)
### Sphericity?
harvie_matrix <- as.matrix(harvie)
harvie_matrix[, -c(1,2)]
### Sphericity?
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- harvie_matrix[, -c(1,2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
harvie
### Sphericity?
harvie %>%
filter(direction_rotation == 1)
### Sphericity?
harvie %>%
filter(direction_rotation == 1) %>%
select(ends_with("feedback"))
### Sphericity?
left <- harvie %>%
filter(direction_rotation == 1) %>%
select(ends_with("feedback"))
right <- harvie %>%
filter(direction_rotation == 2) %>%
select(ends_with("feedback"))
merge(left, right)
left
right
### Sphericity?
left <- harvie %>%
filter(direction_rotation == 1) %>%
select(-direction_rotation)
left
right <- harvie %>%
filter(direction_rotation == 2) %>%
select(-direction_rotation)
merge(left, right, by = "participant")
harvie2 <- merge(left, right, by = "participant")
harvie_matrix <- as.matrix(harvie2)
harvie_matrix
harvie_matrix <- harvie_matrix[, -1]
harvie_matrix
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback.x", "accurate_feedback.x", "overstated_feedback.x",
"understated_feedback.y", "accurate_feedback.y", "overstated_feedback.y"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
### Sphericity?
left <- harvie %>%
filter(direction_rotation == 1) %>%
select(-direction_rotation)
right <- harvie %>%
filter(direction_rotation == 2) %>%
select(-direction_rotation)
harvie2 <- merge(left, right, by = "participant")
harvie_matrix <- as.matrix(harvie2)
harvie_matrix <- harvie_matrix[, -1]
model <- lm(harvie_matrix ~ 1)
harvie_matrix
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback.x", "accurate_feedback.x", "overstated_feedback.x",
"understated_feedback.y", "accurate_feedback.y", "overstated_feedback.y"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
summary(results)
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback_x", "accurate_feedback_x", "overstated_feedback_x",
"understated_feedback_y", "accurate_feedback_y", "overstated_feedback_y"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
model
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
model
```{r}
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="II")
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
harvie_matrix
### Sphericity?
harvie_matrix <- as.matrix(harvie)
harvie_matrix
harvie_matrix <- harvie_matrix[, -c(1, 2, 4)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
design <- factor(c("understated_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
### Sphericity?
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- harvie_matrix[, -c(1, 2, 4)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
harvie_matrix
### Sphericity?
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
# Import dataset
harvie <- read_csv("../data/Harvie et al. 2015.csv")
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
# Create long form
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
# Set variables as factors
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
participant <- factor(participant)
})
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
# Create the analysis of variance object
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation),
data = harvie_clean)
# Summarize the aov object
summary(harvie_aov)
# Extract sum of squares
(harvie_aov_tidy <- tidy(harvie_aov))
# Collect sum of squares
harvie_aov_tidy$sumsq[3]
harvie_aov_tidy$sumsq[4]
# Calculate partial eta-squared
(harvie_eta <- harvie_aov_tidy$sumsq[3] / (harvie_aov_tidy$sumsq[3] + harvie_aov_tidy$sumsq[4]))
### Significant Outliers?
ggplot(harvie_clean, aes(x = feedback_type, y = pain_onset)) +
geom_boxplot()
### Normality?
shapiro.test(harvie$understated_feedback)
shapiro.test(harvie$overstated_feedback)
### Sphericity?
harvie
### Sphericity?
harvie1 <- harvie %>%
filter(direction_rotation == 1)
harvie_matrix <- as.matrix(harvie1)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
harvie_matrix
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
### Sphericity?
harvie1 <- harvie %>%
filter(direction_rotation == 2)
harvie_matrix <- as.matrix(harvie1)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
### Sphericity?
harvie1 <- harvie %>%
filter(direction_rotation == 2)
harvie_matrix <- as.matrix(harvie1)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
### Sphericity?
harvie1 <- harvie %>%
filter(direction_rotation == 1)
harvie_matrix <- as.matrix(harvie1)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
# Import dataset
harvie <- read_csv("../data/Harvie et al. 2015.csv")
# Rename variables
(harvie <- harvie %>%
rename(
participant = Participant,
direction_rotation = DirectionofRotation,
understated_feedback = Understated_Visual_Feedback,
accurate_feedback = Accurate_Visual_Feedback,
overstated_feedback = Overstated_Visual_Feedback
))
# Create long form
(harvie_clean <- harvie %>%
gather(key = feedback_type, value = pain_onset,
-c(participant, direction_rotation))
)
# Set variables as factors
harvie_clean <- within(harvie_clean, {
direction_rotation <- factor(direction_rotation)
feedback_type <- factor(feedback_type)
participant <- factor(participant)
})
(harvie_desc <- harvie %>%
select(ends_with("Feedback")) %>%
describe()
)
# Create the analysis of variance object
harvie_aov <- aov(pain_onset ~ feedback_type + Error(participant/direction_rotation),
data = harvie_clean)
# Summarize the aov object
summary(harvie_aov)
# Extract sum of squares
(harvie_aov_tidy <- tidy(harvie_aov))
# Collect sum of squares
harvie_aov_tidy$sumsq[3]
harvie_aov_tidy$sumsq[4]
# Calculate partial eta-squared
(harvie_eta <- harvie_aov_tidy$sumsq[3] / (harvie_aov_tidy$sumsq[3] + harvie_aov_tidy$sumsq[4]))
### Significant Outliers?
ggplot(harvie_clean, aes(x = feedback_type, y = pain_onset)) +
geom_boxplot()
### Normality?
shapiro.test(harvie$understated_feedback)
shapiro.test(harvie$overstated_feedback)
### Sphericity?
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
harvie_matrix <- as.matrix(harvie)
harvie_matrix <- harvie_matrix[, -c(1, 2)]
model <- lm(harvie_matrix ~ 1)
design <- factor(c("understated_feedback", "accurate_feedback", "overstated_feedback"))
options(contrasts = c("contr.sum", "contr.poly"))
results <- Anova(model, idata = data.frame(design), idesign = ~design, type="III")
summary(results, multivariate = FALSE)
install.packages("multcomp")
library(multcomp)
lme(pain_onset ~ feedback_type, random = ~1|participant/direction_rotation, data = harvie_clean)
??lme
install.packages("nlme")
install.packages("nlme")
library(nlme)
library(nlme)
install.packages("nlme")
library(nlme)
lme(pain_onset ~ feedback_type, random = ~1|participant/direction_rotation, data = harvie_clean)
lme_harvie <- lme(pain_onset ~ feedback_type, random = ~1|participant/direction_rotation, data = harvie_clean)
summary(glht(lme_harvie, linfct=mcp(Material = "Tukey")), test = adjusted(type = "bonferroni"))
library(multcomp)
summary(glht(lme_harvie, linfct=mcp(Material = "Tukey")), test = adjusted(type = "bonferroni"))
lme_harvie <- lme(pain_onset ~ feedback_type, random = ~1|participant/direction_rotation, data = harvie_clean)
summary(glht(lme_harvie, linfct=mcp(Material = "Tukey")), test = adjusted(type = "bonferroni"))
